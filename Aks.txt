trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'AzureServiceConnection'
  resourceGroup: 'your-resource-group'
  aksClusterName: 'your-aks-cluster'
  nodePoolName: 'your-nodepool-name'
  namespace: 'your-app-namespace'

stages:
  - stage: PreChecks
    displayName: "Pre-Patching Validations"
    jobs:
      - job: ValidateCluster
        displayName: "Validate AKS Cluster Health"
        steps:
          - task: AzureCLI@2
            displayName: "Login to Azure & Get AKS Credentials"
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group $(resourceGroup) --name $(aksClusterName) --overwrite-existing
                kubectl cluster-info
                kubectl get nodes -o wide
                kubectl get pods -A --field-selector=status.phase!=Running

  - stage: Patching
    displayName: "Patch AKS Nodes"
    dependsOn: PreChecks
    condition: succeeded()
    jobs:
      - job: PatchNodes
        displayName: "Upgrade AKS Node Pool & Reboot Nodes"
        steps:
          - task: Bash@3
            displayName: "Drain Nodes (Pause Workloads)"
            continueOnError: true
            inputs:
              targetType: 'inline'
              script: |
                nodes=$(kubectl get nodes -o=jsonpath='{.items[*].metadata.name}')
                for node in $nodes; do
                  echo "Draining node: $node"
                  kubectl drain $node --ignore-daemonsets --delete-local-data --force --grace-period=60
                done

          - task: AzureCLI@2
            displayName: "Upgrade AKS Node Pool"
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks nodepool upgrade --resource-group $(resourceGroup) --cluster-name $(aksClusterName) --name $(nodePoolName) --node-image-only --yes

          - task: Bash@3
            displayName: "Uncordon Nodes (Resume Workloads)"
            inputs:
              targetType: 'inline'
              script: |
                nodes=$(kubectl get nodes -o=jsonpath='{.items[*].metadata.name}')
                for node in $nodes; do
                  echo "Uncordoning node: $node"
                  kubectl uncordon $node
                done

  - stage: PostValidation
    displayName: "Post-Patching Validation"
    dependsOn: Patching
    condition: succeeded()
    jobs:
      - job: ValidateAfterPatch
        displayName: "Check Cluster Health After Patching"
        steps:
          - task: Bash@3
            displayName: "Validate Nodes"
            inputs:
              targetType: 'inline'
              script: |
                echo "Checking node status..."
                kubectl get nodes -o wide

          - task: Bash@3
            displayName: "Validate Running Pods"
            inputs:
              targetType: 'inline'
              script: |
                echo "Checking pod status..."
                kubectl get pods -A --field-selector=status.phase!=Running

  - stage: TriggerCD
    displayName: "Trigger Deployment Pipeline"
    dependsOn: PostValidation
    condition: succeeded()
    jobs:
      - job: TriggerCD
        displayName: "Trigger Continuous Deployment"
        steps:
          - task: AzureCLI@2
            displayName: "Trigger CD Pipeline"
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az pipelines run --name 'CD-Pipeline-For-Deployment'
